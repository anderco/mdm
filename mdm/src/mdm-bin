#!/bin/bash

# Copyright (C) 2004-2007 Centro de Computacao Cientifica e Software Livre
# Departamento de Informatica - Universidade Federal do Parana - C3SL/UFPR
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
# USA.

# This is the script that is called by init.d/mdm, it is the one that actually
# starts the "hard work".

# Do this first:
MDM_PREFIX=/
MDM_SCRIPTS=${MDM_PREFIX}/usr/sbin
MDM_INCLUDE=${MDM_SCRIPTS}/mdm-common
source $MDM_INCLUDE

MY_LOG=${MDM_LOGS}/mdm.log
MY_PIDFILE=${MDM_PIDS}/mdm.pid

CREATE_XORG_CONF=${MDM_SCRIPTS}/create-xorg-conf
START_SEAT=${MDM_SCRIPTS}/mdm-start-seat
START_MONOSEAT=${MDM_SCRIPTS}/mdm-start-monoseat

function exec_start() {

    log --log-file-only "Multiseat Display Manager version $MDM_VERSION"
    log --log-file-only "Today is $(date)."

    if ([ "$RECREATE_XORG_CONF" = 'yes' ] || [ ! -f "$MDM_XORG_CONF" ]); then
	$CREATE_XORG_CONF
    fi

    if [ "$RECONFIGURE_INPUT" = 'yes' ]; then
	# Removing links AND locks
	for i in `ls $MDM_DEVICES`; do
	    rm -f $MDM_DEVICES/$i
	done
    fi

    VIDEO_CARDS=$($DISCOVER_DEVICES driver | wc -l)

    log --log-file-only "$VIDEO_CARDS video cards detected"

    # Other scripts assume we do this:
    export DISPLAY=:0

    # erase links, locks, logs, close stuff, whatever needed
    display_manager_init
    # check result
    if [ "$?" != "0" ]; then
        log --log-file-only "Error: failed to initialize $MULTISEAT_MODE"
        exec_stop
        exit 1
    fi

    # find out how many seats we actually have
    OUTPUTS_PER_CARD=$(grep "SCREEN_AMOUNT" $XRANDR_INFO_FILE | cut -d'=' -f2)
    SEATS=0
    for i in $OUTPUTS_PER_CARD; do
	SEATS=$(($SEATS+$i))
    done

    log --log-file-only "$SEATS seats detected"

    if [ "$SEATS" = "1" ] || [ "$USE_MONOSEAT" = 'yes' ] ; then
        log --log-file-only "Not using multiseat"
        rotate_log ${MDM_LOGS}/mdm-monoseat.log
        $START_MONOSEAT &> ${MDM_LOGS}/mdm-monoseat.log &
        PID=$!
        echo $PID > $MDM_PIDS/mdm-start-monoseat.pid

    else
	display_manager_start_underneath_xserver >> $MY_LOG 2>&1

        for ((i=0; i < $VIDEO_CARDS; i++)); do
            export DISPLAY=:0.$i
	    xrandr_configure_layout
	done

	# Finding how many screens on each card
	SEATS_ON_CARD=(`grep "SCREEN_AMOUNT" $XRANDR_INFO_FILE | cut -d'=' -f2`)

	SEAT_DISPLAY=1
	for ((i = 0; i < $VIDEO_CARDS; i++)); do
	    export DISPLAY=:0.$i

	    # START_SEAT has 2 parameters:
	    # - the first is the video card number
	    # - the second is the seat display
	    for (( seat=0; seat < "${SEATS_ON_CARD[i]}"; seat++ )); do
		START_SEAT_LOG="${MDM_LOGS}/mdm-start-seat.${SEAT_DISPLAY}.log"
		rotate_log ${START_SEAT_LOG}

		log --log-file-only "Starting seat $((i+1)) ${SEAT_DISPLAY}"
		${START_SEAT} $((i+1)) $SEAT_DISPLAY &> $START_SEAT_LOG &
		PID=$!
		echo $PID > ${MDM_PIDS}/start-seat.${SEAT_DISPLAY}.pid
		((SEAT_DISPLAY++))
	    done
	done
    fi
}

function exec_stop() {

    log --log-file-only "Stopping mdm..."
    display_manager_stop

    for i in $(ls $MDM_PIDS/*.pid 2> /dev/null | grep -v mdm.pid); do
	rkill $(cat $i) 2> /dev/null
	rm -f $i
    done

    rm -f $MY_PIDFILE
}


function run_service() {

    # /var/run is re-created at every reboot
    mkdir -p ${MDM_RUN}

    echo $$ > $MY_PIDFILE

    trap exec_stop SIGTERM

    exec_start

    # now we sleep until we get a SIGTERM or all our children die
    wait

    log --log-file-only "All children died. Aborting"
    exec_stop

    return 0
}

function print_help() {

    echo "$0 usage:"
    echo "    $0 [options]"
    echo "where options include:"
    echo "    --reconfigure   starts mdm recreating xorg.conf.mdm and"
    echo "                    reconfiguring input, overwriting values"
    echo "                    in mdm.conf"
    echo "    --version       prints mdm's version"
    echo "    --help          prints this message"
}

####################

# Check if we're root
if [ ! "$(id -u)" -eq  "0" ]; then
    log "ERROR: not running as root user"
    exit 1
fi

RUNNING_AS_DAEMON=0

while (( $# > 0 )); do
    case "$1" in
	--daemon)
	    RUNNING_AS_DAEMON=1
	    shift 1
	    ;;
        --reconfigure)
            # overwrite what's written in mdm.conf:
            RECREATE_XORG_CONF='yes'
            RECONFIGURE_INPUT='yes'
	    shift 1
            ;;
        --version)
            echo "$MDM_VERSION"
            exit 0
            ;;
        --help)
            print_help
            exit 0
            ;;
        *)
            echo "$0: unrecognized option: '$1'"
            print_help
            exit 1
            ;;
    esac
done

# This script needs to run as a daemon, so whenever someone call us (probably
# from init.d), we'll fork to become a real daemon. Since there is no decent
# "fork" in bash, we just do "$0 --daemon $@"
if [ "$RUNNING_AS_DAEMON" = "1" ]; then
    cd /
    umask 0

    log --log-file-only "mdm daemon started"

    run_service
    exit $?

else
    # Don't rotate log after becomming a daemon
    rotate_log $MY_LOG

    log --log-file-only "Starting mdm daemon..."

    # Forking, dettaching, closing outputs, etc
    setsid nohup $0 --daemon $@ &> /dev/null & # Run setsid or nohup first?
    exit $?
fi
